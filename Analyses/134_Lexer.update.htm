<html>
	<head>
		<title>Analyse lexicale incrementielle</title>
		<link rel="stylesheet" type="text/css" href="css/syntaxes.css">
	<style>
.js {
	white-space: wrap;
	}
.new {
	background: lime !important;
	}
.difference {
	border: 3px solid red !important;
	}
#eText {
	height:650px;
	padding: 5px;
	transition: 250ms ease;
	width: 100%;
	}
.chrono { white-space: normal; }
.test {
	box-sizing: border-box;
	border-radius: 2em 2em 0 0;
	float: left;
	margin: 1em 0 0;
	position: relative;
	text-align: center;
	transition: background 250ms ease;
	width: 33.33%;
	z-index: 2;
	}
.test:hover {
	background: lightskyblue;
	box-shadow: 0 0 10px #888;
	z-index: 3;
	}
.test > DIV {
	height: 12em;
	}
.test H2 { margin: 0.25em 0; }
.test .result {
	background: #FFF;
	border: 1px solid #CCC; 
	box-sizing: border-box;
	height: 650px;
	margin: 2px;
	padding: 5px;
	opacity: 0.8;
	overflow: auto;
	position: relative;
	text-align: left;
	transition: 250ms ease;
	}
/*
#eText:hover {
	left: 0;
	width: 300%;
	z-index: 3; 
	}
.test .result:hover {
	border: 3px solid lightskyblue;
	box-shadow: 0 0 10px #888;
	left: 0;
	opacity: 1;
	width: 100%;
	z-index: 3;
	}
#eResult1:hover { margin-left: -100%; width: 300%; }
#eResult2:hover { margin-left: -200%; width: 300%; }
*/
FIELDSET {
	float: left;
	margin: 0 1em 1em 0;
	}
FIELDSET DL {
	margin: 0;
	}
	</style>
</head>
<body spellcheck="false">
<a href="index.htm">Index</a>

<h1>Analyse lexicale incrementielle</h1>
<p>Pour réaliser une analyse partielle il nous faut connaître:</p>
<ol>
	<li>L'index du début de la modification.</li>
	<li>Le nombre de caractères éffacés et/ou le texte ajouté.</li>
</ol>

<hr>

<fieldset><legend>Affichage</legend>
	<dl>
		<dt><input type="checkbox" id="eShowResults" checked><label for="eShowResults">Afficher le résultat</label></dt>
		<dt><input type="radio" id="eTestCase1" name="TestCase"><label for="eTestCase1">Résultat analyse lexicale (LexerNode lourd).</label></dt>
		<dt><input type="radio" id="eTestCase2" name="TestCase"><label for="eTestCase2">Texte généré: parcours arbre (LexerNode légé).</label></dt>
		<dt><input type="radio" id="eTestCase3" name="TestCase"><label for="eTestCase3">Texte généré: ligne/ligne (LexerNode légé).</label></dt>
	</dl>
</fieldset>
<fieldset><legend>LexerNode</legend>
	<dl>
		<dt><select id="eLexerNode">
			<option value="HTMLElement" selected>HTMLElement</option>
			<option value="ObjectNode">ObjectNode</option>
		</select></dt>
		<dt><input type="checkbox" id="eClassName"><label for="eClassName">className</label></dt>
		<dt><input type="checkbox" id="eTitle"><label for="eTitle">title</label></dt>
		<dt><input type="checkbox" id="eInnerHTML"><label for="eInnerHTML">innerHTML</label></dt>
		<dt><input type="checkbox" id="eByLine"><label for="eByLine">getElementsByLine</label></dt>
	</dl>
</fieldset>
<fieldset><legend>Résultat</legend>
	<dl>
		<dt><input type="radio" id="eMode1" name="Mode"><label for="eMode1">Debug mode.</label></dt>
		<dt><input type="radio" id="eMode2" name="Mode" checked><label for="eMode2">Production.</label></dt>
		<dt><input type="checkbox" id="eBTitle"><label for="eBTitle">Description des tokens (survol)</label></dt>
		<dt><input type="checkbox" id="eCheckDifference"><label for="eCheckDifference">Surlignage des différences</label></dt>
	</dl>
</fieldset>

<hr style="clear:both;">
<center style="color:#AAA;">
	<b id="eVelocity"></b><br>
	Temps affichage (analyse totale): <span id="eDisplayTime"></span> ms.
</center>

<div class="test">
	<div><h2>Source</h2>
		<table style="width:100%;">
			<tr>
				<th><label for="eIndex">Position: </label></th>
				<td><input type="text" id="eIndex" size="5" value="32"></td>
			</tr>
			<tr>
				<th><label for="eDeletedCharNumber">Effacer: </label></th>
				<td><input type="text" id="eDeletedCharNumber" size="3" value="5"> caractère(s)</td>
			</tr>
			<tr>
				<th><label for="eAdded">Ajouter: </label></th>
				<td><textarea id="eAdded" style="height:48px; width:100%;"></textarea></td>
			</tr>
			<tr>
				<th colspan="2"><input type="button" id="eUpdate" value="Mettre à jour"></th>
			</tr>
		</table>
	</div>
	<textarea id="eText" wrap="off" style="">
/* 1 - JavaScript syntax */
	variable n = nInt1/4 + 4/nInt1++ || 10 
	var oEditor = new EditorSample ( eContent ,{
		// a single line comment ( a single quote ' )
		aArray : [ true , false , null , undefined , Infinity , NaN ],
		sDoubleQuoteString : "/* ' a multi line comment */ // a single line comment " ,
		sSingleQuoteString : '/* "\
			a multi line string */ // a single line comment '
		sBracketsTest1_1 : "{[(",
		sBracketsTest1_2 : "}])",
		/*
		a  multi line comment ( a double quote " )
		*/
		})
	RegExp.extend({
		escape :function( s ){
			// Bracket test 2
			var re1 = /(\.|\?|\*|\+|\\|\(|\)|\[|\]|\}|\{|\$|\^|\|)/g
			, re2 = /("|')/gm
			return s.replace( re1 , "\\$1" )
			}
		})

/* 2 - PHP */
	<?php
	function phpSafe ( $strText ){
		// a single line comment ( a double quote ")
		$tmpString = $strText ;
		$tmpString = str_replace( chr(92) , "" , $tmpString ); 
		returning rawurldecode( $tmpString );
		}
		
	/*
	a  multi line comment ( a single quote ' )
	*/
	$hiddencontent = phpSafe( $_POST[ 'content' ]);
	?>
alert('ok')
</textarea>
</div>
<div id="eTest1" class="test">
	<div><h2><input id="eLocalAnalyse" type="checkbox" checked style="visibility:hidden;">Analyse partielle</h2>
		<pre id="eChrono1" class="chrono">...<br>...<br>...<br>...<br>...</pre>
		<pre>Temps affichage: <b id="eTime1" class="chrono">...</b></pre>
	</div>
	<pre id="eResult1" class="result"></pre>
</div>
<div id="eTest2" class="test">
	<div><h2><input id="eGlobalAnalyse" type="checkbox" checked>Analyse totale</h2>
		<pre id="eChrono2" class="chrono">...</pre>
		<pre>Temps affichage: <b id="eTime2" class="chrono">...</b></pre>
	</div>
	<pre id="eResult2" class="result"></pre>
</div>

<script src="js/shared.js"></script>

<!-- LEXER -->
<script src="js/lexer.automaton.js"></script>
<script src="js/lexer.automaton.modules.js"></script>

<!-- LEXER NODE -->
<script src="js/lexer.node.object.js"></script>
<script>
var LexerNode
, createLexerNode =function( bClassName, bTitle, bInnerHTML, bByLine ){
	eClassName.checked = bClassName
	eTitle.checked = bTitle
	eInnerHTML.checked = bInnerHTML
	eByLine.checked = bByLine
	var s = '{}'
	switch( eLexerNode.value ){
		case 'HTMLElement': s='document.createElement(o.token)'; break;
		case 'ObjectNode': s='new Node(o.token)'; break;
		}
	LexerNode = new Function ( 'o', 
		'var e = '+ s +';'
		+'e.oValue=o;'
		+( bByLine ? 'e.getElementsByLine=getElementsByLine;' : '' )
		+( bClassName ? 'e.className=o.css;' : '' )
		+( bTitle ? 'e.setTitle=setTitle;e.setTitle();' : '' )
		+( bInnerHTML ? "if( o.value ) e.innerHTML = o.value.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;']);" : '' )
		+'return e;'
		)
	}
</script>

<!-- AFFICHAGE -->
<script>
var replaceSpecialHTML =function( s ){
	return s.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;'])
	}
var getHTMLStart =function( o, bTitle ){
	return eBTitle.checked && o.value
		? '<b class="' + o.css + '" title="' + valueToString( o ) + '">'
		: '<b class="' + o.css + '">'
	}
var getHTMLEnd =function( o ){
	return '</b>'
	}
var valueToString =function(o){
	return JSON.stringify( o, 'token,parentToken,css,index,lineStart,lineEnd'.split(','), " " ).str_replace('"', '')
	}
var getElementsByLine =function( nLine ){
	var a=[]
	for(var e=this.firstChild; e; e=e.nextSibling ){
		if( e.oValue.lineStart<=nLine && nLine<=e.oValue.lineEnd ) a.push(e)
		else if( e.oValue.lineEnd > nLine ) break;
		}
	return a
	}

// 22 = Construction affichage parcours enfant
var displayNodes=function( eParent ){
	var s = getHTMLStart( eParent.oValue )
	var aChild = eParent.childNodes
	for(var i=0, ni=aChild.length; i<ni; i++){
		var eChild = aChild[i]
		if( eChild.hasChildNodes()){
			s += displayNodes( eChild )
			}
		else{
			s += getHTMLStart( eChild.oValue )+
				replaceSpecialHTML( eChild.oValue.value )+
				getHTMLEnd()
			}
		}
	return s + getHTMLEnd()
	}

// 33 = Construction affichage ligne/ligne
var getLine =function( eRoot, nLine ){
	var a=[ getHTMLStart( eRoot.oValue ) ], aElts = eRoot.getElementsByLine( nLine )
	for(var i=0, eNode; eNode=aElts[i]; i++)
		eNode.hasChildNodes()
			? a.push( getLine( eNode, nLine ))
			: a.push( getHTMLStart( eNode.oValue ), replaceSpecialHTML( eNode.oValue.value ), getHTMLEnd())
	a.push( getHTMLEnd())
	return a.join('')
	}
var getLines =function( eRoot, nLineStart, nLineEnd ){
	var a=[]
	for(var i=nLineStart; i<=nLineEnd; i++ ) a.push( getLine( eRoot, i ))
	return a
	}
var getContents =function( eRoot ){
	return getLines( eRoot, 1, eRoot.oValue.lineEnd )
	}
</script>

<!-- BENCHMARK -->
<div id="eStats" class="stats"></div>
<link rel="stylesheet" type="text/css" href="widget/Stats/styles.css">
<script src="widget/Stats/scripts.js"></script>
<script>
/*
BenchmarkFunctions(
	_('eStats'), AutomatonLexer.prototype,
//	'readToken,getNextEndToken,markEndTag,searchToken,'
//	+'haveNode,isParentLimit,isParent,isPartOfDeletedRange,isRoot,'
//	+'removeNode,updateValues,'
//	+'init,'+
	'rescan,scan'
	)
*/
</script>

<!-- ANALYSES -->
<script>
var Analyse =(function(){
	var eRootLocal, eRootGlobal
	var compareResult =function( e1, e2 ){
		var fCompare=function( e1, e2 ){
			if( e1 && e2 ){
				if( ! e1.oValue ) console.warn( e1 )
				if( ! e2.oValue ) console.warn( e2 )
				if( e1.oValue.index != e2.oValue.index ){
					if( e1.oValue.index < e2.oValue.index ){
						while( e1 && e1.oValue.index < e2.oValue.index ){
							e1.className += ' difference'
							e1 = e1.nextSibling
							}
						}
					else {
						while( e2.oValue.index < e1.oValue.index ){
							e2.className += ' difference'
							e2 = e2.nextSibling
							}
						}
					}
				if( e1.title != e2.title ){
					e1.className += ' difference'
					e2.className += ' difference'
					return false
					}
				return true
				}
			if( e1 ) e1.className += ' difference'
			if( e2 ) e2.className += ' difference'
			}
		fCompare( e1, e2 )
		if( e1 && e2 && e1.childNodes.length != e2.childNodes.length ) alert('ko')
		for(var _e1=e1&&e1.firstChild.nodeType==1?e1.firstChild:null, _e2=e2&&e2.firstChild.nodeType==1?e2.firstChild:null;
			  _e1||_e2 ;
			  _e1 = _e1?_e1.nextSibling:null, _e2 = _e2?_e2.nextSibling:null ){
			var a = compareResult( _e1, _e2 )
			_e1 = a[0]
			_e2 = a[1]
			}
		return [ e1, e2 ]
		}
	return {
		init :function(){
			Stats.init('global_time')
			Analyse.partielle.initialize()
			Analyse.totale()
			},
		partielle:{
			initialize :function(){
				Stats.init('local_time')
				eResult1.innerHTML = ''
				var oChrono = new Chrono ()
				eRootLocal = AutomatonLexer( eText.value, 'JS' )
				eChrono1.innerHTML = '...<br>...<br>...<br>...<br>...'
				if( eShowResults.checked )
					switch( nDisplayMode ){
						case 11: eResult1.appendChild( eRootLocal ); break;
						case 22: eResult1.innerHTML = displayNodes( eRootLocal ); break;
						case 33: eResult1.innerHTML = getContents( eRootLocal ).join(''); break;
						default:; break;
						}
				eTime1.innerHTML = '...'
				},
			doIt :function( nPos, nDeleted, nAddded ){
				if( ! eResult1.parentNode ) return;
				eTest1.removeChild( eResult1 )
				var oChrono = new Chrono ()
				var oUpdate = AutomatonLexer.rescan( eRootLocal, eText.value, nPos, nDeleted, nAddded )
				// alert( JSON.stringify( oUpdate, null, '\t' ))
				eChrono1.innerHTML = Stats.set( 'local_time', oChrono.stop())
				if( oUpdate && eShowResults.checked )
					switch( nDisplayMode ){
						case 11: break;
						case 22: eResult1.innerHTML = displayNodes( eRootLocal )
							break;
						case 33:
								var nLinesDeleted = oUpdate.lineEnd-oUpdate.lineStart+1
								var nLinesNullified = nLinesDeleted + oUpdate.lineShift
								var aNull = nLinesNullified>0 ? new Array( nLinesNullified ) : []

								for(var i=oUpdate.lineEnd-1, ni=oUpdate.lineStart-1; i>=ni ; i-- ){
									var eNode = eResult1.childNodes[i]
									if( eNode ) eResult1.removeChild( eNode )
									}

								var eNext = eResult1.childNodes[ oUpdate.lineStart-1 ]
								for(var i=oUpdate.lineStart, ni=i+nLinesNullified; i<ni; i++ ){
									var eNode = document.createElement('B')
									eNode.innerHTML = getLine( eRootLocal, i )
									if( eNext ) eResult1.insertBefore( eNode, eNext )
										else eResult1.appendChild( eNode )
									}
							break;
						default:
							break;
						}
				eTime1.innerHTML = oChrono.stop().toFixed(3) + 'ms'
				eTest1.appendChild( eResult1 )
				}
			},
		totale:function(){
			if( ! eResult2.parentNode ) return;
			eTest2.removeChild( eResult2 )
			eResult2.innerHTML = ''
			var oChrono = new Chrono ()
			eRootGlobal = AutomatonLexer( eText.value, 'JS' )
			eChrono2.innerHTML = Stats.set( 'global_time', oChrono.stop())
			if( eShowResults.checked )
				switch( nDisplayMode ){
					case 11: eResult2.appendChild( eRootGlobal ); break;
					case 22: eResult2.innerHTML = displayNodes( eRootGlobal ); break;
					case 33: eResult2.innerHTML = getContents( eRootGlobal ).join(''); break;
					default:; break;
					}
			var nTime = oChrono.stop()
			eDisplayTime.innerHTML = ( nTime - Stats.get('global_time').lastTime ).toFixed(3)
			eTime2.innerHTML = nTime.toFixed(3) + 'ms'
			eTest2.appendChild( eResult2 )
			},
		compare :function(){ compareResult( eRootGlobal, eRootLocal )}
		}
	})()
</script>

<!-- DHTML -->
<script>
_( 'eBTitle,eCheckDifference,eDisplayTime' )
_( 'eText,eOnKeyUp' )
_( 'eShowResults,eResult1,eResult2' )
_( 'eMode1,eMode2' )
_( 'eTime1,eTime2' )
_( 'eTest1,eTest2' )
_( 'eTestCase1,eTestCase2,eTestCase3' )
_( 'eLocalAnalyse,eGlobalAnalyse' )
_( 'eChrono1,eChrono2' )
_( 'eLexerNode,eClassName,eTitle,eInnerHTML,eByLine' )
_( 'eIndex,eDeletedCharNumber,eAdded,eUpdate' )


var sMode
var nDisplayMode

Events.add(
	'change',
		eLexerNode, function(){
			if( this.value=='ObjectNode' && nDisplayMode==11 ) eShowResults.checked = false
			createLexerNode( eClassName.checked,eTitle.checked,eInnerHTML.checked,eByLine.checked );
			Analyse.init()
			},
	'click',
		eBTitle, Analyse.init,
		eShowResults, function(){
			if( ! this.checked ) eResult1.innerHTML = eResult2.innerHTML = ''
			else{
				if( nDisplayMode==11 ){
					eLexerNode.value = 'HTMLElement'
					eLexerNode.onchange()
					}
				Analyse.init()
				}
			},
		eMode1, function(){ eMode1.checked = sMode = 'Debug'; eBTitle.checked = true; eCheckDifference.checked = true; eTestCase1.onclick(); /*eGlobalAnalyse.checked = true;*/ },
		eMode2, function(){ eMode2.checked = sMode = 'Prod'; eBTitle.checked = false; eCheckDifference.checked = false; eTestCase3.onclick(); /*eGlobalAnalyse.checked = false;*/},
		eClassName, function(){
			createLexerNode( eClassName.checked,eTitle.checked,eInnerHTML.checked,eByLine.checked );
			},
		eTitle, function(){
			createLexerNode( eClassName.checked,eTitle.checked,eInnerHTML.checked,eByLine.checked );
			},
		eInnerHTML, function(){
			if( ! eInnerHTML.checked && nDisplayMode == 11 ) eTestCase2.onclick()
			if( eInnerHTML.checked && ( nDisplayMode == 22 || nDisplayMode == 33 )) eTestCase1.onclick()
			else createLexerNode( eClassName.checked,eTitle.checked,eInnerHTML.checked,eByLine.checked );
			},
		eByLine, function(){
			if( ! eByLine.checked && nDisplayMode == 33 ) eTestCase2.onclick()
			else createLexerNode( eClassName.checked,eTitle.checked,eInnerHTML.checked,eByLine.checked );
			},
		eTestCase1, function(){
			eTestCase1.checked = nDisplayMode = 11;
			if( eShowResults.checked && eLexerNode.value=='ObjectNode' ) eShowResults.checked = false
			createLexerNode( 1,0,1,0 );
			Analyse.init()
			},
		eTestCase2, function(){
			eTestCase2.checked = nDisplayMode = 22;
			createLexerNode( 0,0,0,0 );
			Analyse.init()
			},
		eTestCase3, function(){
			eTestCase3.checked = nDisplayMode = 33;
			createLexerNode( 0,0,0,1 );
			Analyse.init()
			},
		eUpdate, function(){
			var s = eText.value
			, nPos = parseInt( eIndex.value || 0 )
			, nDeleted = parseInt( eDeletedCharNumber.value || 0 )
			, nAddded = eAdded.value.length
			
			eText.value = s.substring( 0, nPos) + eAdded.value + s.substr( nPos + nDeleted )

			if( eGlobalAnalyse.checked ) Analyse.totale();
			if( eLocalAnalyse.checked ) Analyse.partielle.doIt( nPos, nDeleted, nAddded )
			if( eLocalAnalyse.checked && eGlobalAnalyse.checked ){
				if( eCheckDifference.checked ) Analyse.compare()
				var n = Stats.get('global_time').lastTime / Stats.get('local_time').lastTime
				_('eVelocity').innerHTML = n != Infinity
					? n.toFixed( 1 ) + 'x plus rapide'
					: '...non mesurable !'
				}
			},
	eText, 
		'click', function(){
			if( ! (  eText.selectionEnd - eText.selectionStart )){
				eIndex.value = eText.selectionStart
				eDeletedCharNumber.value = 0
				}
			},
		'select', function(){
			eIndex.value = eText.selectionStart
			eDeletedCharNumber.value = eText.selectionEnd - eText.selectionStart
			}
	)

eMode2.onclick()
</script>
</body>
</html>