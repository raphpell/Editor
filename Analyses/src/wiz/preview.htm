<!DOCTYPE HTML>
<html>
<head>
	<title>Module WIZ</title>
	<link rel="stylesheet" type="text/css" href="../../css/styles.css">
	<style>
HTML, BODY {
    margin: 0;
    padding: 0 0.5em;
	}
H1 {
    margin: 0 0 0.25em;
    padding: 0;
	}
#eInput{
	width: 100%;
	height: 300px;
	}
/* Arbre syntaxique */
.relief .myNode {
    border: 1px solid #CCCCCC;
    box-shadow: 2px -2px 2px #999999;
    display: inline;
	line-height: 2em;
    margin: 2px;
    padding: 1px;
	position: relative;
	vertical-align: text-top;
    white-space: pre;
	}
.relief .myNode .myNode {
	margin: 1px;
	}
.relief .myNode:hover {
	background: lime !important;
	border: 1px solid #000;
	transition: 1s ease;
	}
	.relief .myNode:hover > .myNode {
		background: yellow;
		color:#000;
		}
	</style>
</head>
<body spellcheck="false">

<h1 id="eH1">Module WIZ</h1>
<p><a href="syntax.htm">Syntaxe</a></p>

<p>Analyse lexicale et syntaxique...</p>

<div id="eRE"></div>

<label for="eInput">Texte : </label><br>
<textarea id="eInput">
¤ strings&comments

!@	WIZ		=	WHITE_SPACES|{comments}|COMPIL|IDENTIFIER|S_WIZ_IMPORT|S_RULE|S_BLOCK

	WHITE_SPACES	=	{hs}+|{nl}
			( css:whitespaces )
	COMPIL		=	[\!\@\#]+
			( css:compil )
	IDENTIFIER	=	{id}
			( css:identifier )

// Fichier requis
!@	WIZ_IMPORT		=	WIZ_FILE|ELISION
			( translation:REQUIRED )
	S_WIZ_IMPORT	=	¤
			( css:compil )
	WIZ_FILE		=	[^\r\n\f,]+
			( css:value )
	ELISION			=	,

// Valeur de l'identifiant
@!	RULE		=	RULE_IN
	S_RULE	=	={hs}+
			( previousTokens:IDENTIFIER )
	RULE_IN		=	[^\r\n\f]+
			( css:value )

// Attribut d'un token	
!@ BLOCK		=	WHITE_SPACES|ATTRIBUTE|S_VALUE|E_BLOCK
	S_BLOCK	=	{nl}+{hs}+\(
	E_BLOCK	=	\)
	ATTRIBUTE	=	{id}
			( css:identifier )

// Valeur d'un attribut
!@	VALUE		=	VALUE_IN|E_VALUE
	S_VALUE	=	\:
	E_VALUE	=	\,
	VALUE_IN	=	[^,\)]+
	
// Macros
	// partie d'une aggrégation
	comments	= S_MLC|S_SLC
	
	// partie d'expressions régulières
	id		=	\w+
	hs		=	[ \t]
	nl		=	\r\n|[\n\r\f]
</textarea>
<input type="button" id="eBtnMatch" value="Analyser">
<input type="checkbox" id="eRelief"><label for="eRelief">Relief.</label>
<pre id="eResult"></pre>

<!-- FRAMEWORK... -->
<script src="../../js/framework.js"></script>

<script src="../../js/lexer.automaton.js"></script>
<script src="../../js/lexer.automaton.modules.js"></script>
<script src="../../js/parserLR.js"></script>
<link rel="stylesheet" type="text/css" href="styles.css">
<script src="lexer.js"></script>
<script src="parser.js"></script>

<!-- ... -->
<script>
var valueToString =function(o){
	return JSON.stringify( o, 'token,parentToken,css,index,lineStart,lineEnd'.split(','), " " ).str_replace('"', '')
	}
var LexerNode =function( o ){
	var sToken = o.token
	, e = document.createElement( sToken )
	, sValue = o.value
	e.oValue = o
	e.title = valueToString( o )
		// sToken +'\n\u25B6'+ sValue +'\u25C0'
	if( sValue ) e.innerHTML = sValue.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;'])
	e.className = 'myNode'
	if( o.css ) e.className += ' '+ o.css
	return e
	}

var match =function(){
	eResult.innerHTML = ''
	try{
		var eLexer = AutomatonLexer( eInput.value, 'WIZ' )
		var aTokens = to_array( eLexer.childNodes )
		eResult.appendChild( ParserLR( aTokens, WizParserEngine.ITEMS ))
	//	eResult.appendChild( eLexer )
	}catch(e){
		eResult.innerHTML = e.message + '<br>'
		if( e.fileName ) eResult.innerHTML += '<br>fichier: '+ e.fileName.split('/').pop()
		if( e.lineNumber ) eResult.innerHTML += '<br>ligne: '+ e.lineNumber
		}
	}
match()

var setInput =function( o ){
	oLoaded = o
	eInput.value = o.text
	match()
	}
</script>
<script>
sTest2="\n"
_( 'eH1,eRE' )
_( 'eInput,eBtnMatch,eRelief,eResult' )
eBtnMatch.onclick = match
eRelief.onclick = function(){ eResult.className = eRelief.checked ? 'relief' : '' }
eRelief.onclick()
</script>

</body>
</html>