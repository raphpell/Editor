<!DOCTYPE HTML>
<html>
<head>
	<title>Module Parenthesis</title>
	<link rel="stylesheet" type="text/css" href="css/syntaxes.css">
	<link rel="stylesheet" type="text/css" href="css/LexerModule.preview.css">
</head>
<body spellcheck="false">
<a href="index.htm">Index</a>

<h1 id="eH1">Module Parenthesis</h1>
<p>Ce module est un exemple d'une analyse lexicale sur plusieurs niveaux.</p>
<p>Définition du module:</p>
<pre>
!#	PARENTHESIS	=	PAREN

!@	PAREN		=	S_PAREN|E_PAREN|WORD|SPACE|TAB|L_NEW_LINE

	S_PAREN		=	\(
		{css:punctuator, translation:LPAREN}
	E_PAREN		=	\)
		{css:punctuator, translation:RPAREN}
	WORD		=	[^\(\)\n\r\f \t]+

	SPACE		=	[ ]
		{css:space}
	TAB		=	\t
		{css:tab}
	L_NEW_LINE	=	\r\n|[\n\r\f]
		{css:linefeed}
</pre>

<label for="eInput">Texte : </label><br>
<textarea id="eInput"><![CDATA[( 1 ) (1 (2 ( 3 ) 2) 1) ) ( 1 ) ( 1( 2 )1 )]]></textarea>
<input type="button" id="eBtnMatch" value="Analyser">
<input type="checkbox" id="eRelief" checked><label for="eRelief">Relief.</label>
<input type="checkbox" id="eWhiteSpaces" checked><label for="eWhiteSpaces">Espaces blancs.</label>
<pre id="eResult"></pre>

<!-- FRAMEWORK... -->
<script src="js/framework.js"></script>
<script src="js/lexer.automaton.js"></script>

<script>
var oLexer = AutomatonLexer
var sLexerRule='PARENTHESIS'
AutomatonLexer.insert(function(o,f,g,h){
	o.addTokens([["PAREN",{A:g("\n","[^\t\n\f\r ()]","\t","\f","\r","(",")","[ ]"),R:[[1,f("\t\n\f\r ()")],[7,f(" ",1)]],M:[[],[8,2,3,8,4,5,6,7],[,2],[],[8],[],[],[],[]],F:[,,7,2,3,4,5,6,3],TokensTable:',,TAB,L_NEW_LINE,S_PAREN,E_PAREN,SPACE,WORD'.split(',')}]])
	o.addRules([["PARENTHESIS","PAREN"]])
	o.addCSSClass("punctuator=S_PAREN|E_PAREN&space=SPACE&tab=TAB&linefeed=L_NEW_LINE")
	o.setTokensTranslation('S_PAREN=LPAREN&E_PAREN=RPAREN')
	});
</script>
<script src="js/LexerModule.preview.js"></script>

</body>
</html>