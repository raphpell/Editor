<!DOCTYPE HTML>
<html>
<head>
	<title>Le replie de bloc</title>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
	<link rel="stylesheet" type="text/css" href="src/css/styles.css">
	<link rel="stylesheet" type="text/css" href="src/css/syntaxes.css">
	<style>
		#eSource {
			display: none;
			}
		#eEditeur1 {
			float: left;
			height: 300px;
			width: 75%;
			}
	</style>
</head>
<body spellcheck="false">

<a href="./index.htm">index</a>

<div><h1>Le replie de bloc</h1>
<p>Ce module requiert le résultat de l'<a href="Strategy.Highlighting.Syntax.htm">analyse lexicale</a>.</p>

<div class=""><h2>Objectifs</h2>
	<ul>
		<li>Réduire visuellement le nombre de ligne du texte source.</li>
	</ul>
</div>

<div class=""><h2>Diagramme</h2>
	<img src="diagram/Class.Fold.gif">
</div>

<div class=""><h2>Aperçu</h2>
<!-- SOURCE -->
<textarea id="eSource"></textarea>
<div id="eContents"><!--Editor.addModule('Fold',(function(){
	Events.add(
		Editor.prototype, 'documentinit', function( D ){
			D.oFold = new Editor.Modules.Fold(D)
		})

	var Range =function( n1/* nLineStart|nLine */, m2/* nLineEnd|sError */, nLevel ){
		var a = [n1,m2,nLevel]
		a.toString =function(){ return a.join(',') +'|' }
		return a
		}
	, _getLevel =function( nLevel ){
		var a=[]
		for(var i=0, aRange; aRange=this.aIntervals[i]; i++ )
			if( nLevel==aRange[2])
				a.push( i )
		return a
		}
	, _actionGroup =function( sAction ){ // fold | unfold
		return function( nLevel ){
			if( nLevel ){
				for(var i=0, m=_getLevel.call(this,nLevel), ni=m.length; i<ni; i++ )
					this[ sAction ]( m[i], true )
				}
			else
				for(var i=0, ni=this.aIntervals.length; i<ni; i++ )
					this[ sAction ]( i, true )
			var D=this.oDocument
			D.oView.refresh()
			D.oTextZoneControl.refresh()
			this.refresh()
			}
		}
	, _actionSingle =function( sAction ){ // hideRange | showRange
		return function( nFoldID, bWithoutFlow ){
			var aRange = this.aIntervals[ nFoldID ]
			if( aRange ){
				var D=this.oDocument
				D.oView[ sAction ]( aRange[0]+1, aRange[1], bWithoutFlow )
				if( ! bWithoutFlow ) D.oTextZoneControl.refresh()
				}
			}
		}
	
	var F =function( D ){
		var F=this
		F.oDocument = D
		F.aIntervals = []
		
		this.e = Tag( 'DL', { className:'fold' })
		D.eTZC.appendChild( this.e )
		Events.preventSelection( true, this.e )
		Events.add(
			this.e, 'mousedown', CallBack( this, function( evt ){
				var e = Events.element(evt)
			//	if( e.nodeName=='DD' ) this.fold( e.previousSibling )
				if( e.nodeName=='DIV' ) this.unfold( e.previousSibling )
				if( e.nodeName=='DT' ){
					switch( e.innerHTML ){
						case '-':this.fold( e.nFoldID )
							break;
						case '+':this.unfold( e.nFoldID )
							break;
					//	default:throw new Error ( e.title )
						}
					}
				// Needed tant que 'e' n'a plus de parent (il est effacé!)
				setTimeout( function(){ D.oEditor.focus()}, 50 )
				})
			,D.oCaret, 'change', CallBack( this, 'highlight' )
			,D.oCharacter, 'sizechange', CallBack( this, function(){
				var b = this.bVisible
				if( b ){
					D.Padding.add( 'left', -this.nWidth )
					this.bVisible = false
					}
				this.nWidth = D.oCharacter.nWidth*2+2
				D.oView.refresh()
				if( ! this.bInitialized || b ) this.show()
			//	else this[ b?'show':'hide' ]()
				})
			,D, 'update', CallBack( this, 'getBrackets' )
			,D.oGutter
				,'hide', CallBack( this, 'refresh' )
				,'show', CallBack( this, 'refresh' )
			,D.oView
				,'hide', CallBack( this, 'refresh' )
				,'show', CallBack( this, 'refresh' )
			,D.oEditor
				,'resize', CallBack( this, 'setBrackets' ) // c'est juste pour redimensionner les barres horizontales
		//	,D.oView, 'change', CallBack( this, 'refresh' )
		//	,D, 'layout', CallBack( this, 'refresh' ) // Hide show Gutter
			)
		}
	F.prototype={
		aIntervals: null,
		aPaired:[
			['S_PHP','E_PHP'],
			['LBRACE','RBRACE'],
			['LBRACK','RBRACK'],
			['S_MLC','E_MLC']
			],
		bInitialized: false,
		bVisible: false,
		nCurrentFoldID: -1,
		nWidth:0,
		oControlPoints: null,
		refresh :function(){
			// Actualise la dimension
			var D=this.oDocument, C=D.oCaret
			var o = this.e.style
			o.left = D.Padding.get('left')-this.nWidth-1 +'px'
			o.height = D.oView.nLinesHeight +'px'
			o.width = this.nWidth +'px'
			// Actualise le contenu
			this.setBrackets()
			if( ! D.oUpdates ) C.setIndex( C.position.index, 'noScrollToPosition' )
			},
		highlight :function(){
			var o = this.oControlPoints
			if( !o ) return;
			var nLine =this.oDocument.oCaret.position.line, nFoldID = -1
			for(var i=0, a; a=this.aIntervals[i]; i++ ){
				if( !a || a.length==2 || nLine<a[0] || a[1]<nLine ) continue;
				if( nLine<=a[1] ) nFoldID = i
				}
			var _f =function( n, s ){
				if( n>-1 && o[n]){
					Tag.className( o[n][0], 'in', s )
					Tag.className( o[n][1], 'in', s )
					}
				return n
				}
			_f( this.nCurrentFoldID, 'delete' )
			this.nCurrentFoldID = _f( nFoldID, 'add' )
			},
		getBrackets :function(){ // TODO : eviter les calcul inutile lors de l'édition
			if( ! this.bVisible ) return ;
			var D=this.oDocument, Sy=D.oSyntax.oStrategy, V=D.oView
			var aBefore = this.aIntervals
			if( Sy ){
				var o=Sy.oRootNode
				, f=function( s ){ return to_array( o.getElementsByTagName( s ))}
				, aIntervals = []
				// Marque à faux tous les intervalles cachés. sera égale aux intervalles sans point de controle
				for(var i=0, a; a=V.aHiddenRanges[i]; i++ ) a[2] = false
				// Recherche les paires
				for(var i=0, ni=this.aPaired.length; i<ni; i++ ){
					var sLPair=this.aPaired[i][0]
					var sRPair=this.aPaired[i][1]
					, aNodes=Array.merge( f(sLPair), f(sRPair))
					aNodes.sortBy( 'oValue.index' )
					var aLPAIR = []
					for(var j=0, oNode; oNode=aNodes[j]; j++ ){
						if( oNode.nodeName==sLPair ) aLPAIR.push( oNode )
						else if( aLPAIR.length ){
							var n1 = aLPAIR.pop().oValue.lineStart
							var n2 = oNode.oValue.lineStart
							if( n1==n2 ) continue;
							aIntervals.push( Range( n1, n2, 1 ))
							// Marquage des intervalles pouvant-être réafichés
							var bHidden = V.isHiddenRange( n1+1, n2 )
							if( bHidden ) V.aHiddenRanges[ bHidden-1 ][2]=true 
							}
						else aIntervals.push( Range( oNode.oValue.lineStart, sLPair +' ?' ))
						}
					for(var j=0, oNode; oNode=aLPAIR[j]; j++ )
						aIntervals.push( Range( oNode.oValue.lineStart, sRPair+' ?' ))
					}
				// Affiche les intervalles ne pouvant plus être réaffiché
				for(var i=0, a; a=V.aHiddenRanges[i]; i++ ) if( ! a[2]) V.showRange( a[0], a[1])
				// Organisation des paires 
				aIntervals.sortBy('1','DESC')
				aIntervals.sortBy('0')
				// Efface des intervalles 'inutiles' + calcul du "Level"
				for(var i=0, ni=aIntervals.length; i<ni; i++ ){
					var a1 = aIntervals[i]
					if( ! a1 ) continue;
					for(var j=i+1; j<ni; j++ ){
						var a2 = aIntervals[j]
						if( ! a2 ) continue;
						if( a1[0]==a2[0]){ // Si deux intervalles ont le même départ on efface le deuxième
							aIntervals[j] = null
							continue;
							}
						if( a2[0]>=a1[1]) break;
						// Mise à jour du "Level"
						if( a1[0]<=a2[0] && a2[1]<=a1[1]) a2[2]=a1[2]+1
						}
					}
				var a = []
				for(var i=0, ni=aIntervals.length; i<ni; i++ )
					if( aIntervals[i])
						a.push( aIntervals[i])
				this.aIntervals = a
				}
			// met à jour l'affichage si et seulement si il diffère
			if( aBefore.toString() != this.aIntervals.toString()) this.refresh()
			},
		setBrackets :function(){
			var D=this.oDocument, Ch=D.oCharacter, eParent=this.e, V=D.oView, F=this
			eParent.innerHTML= ''
			var nHeight = Math.max( 0, Ch.nWidth )
			, sDim = nHeight +'px'
			, sLineHeight = nHeight*3/4 +'px'
			, sLeft = Math.floor( Ch.nWidth/2-1 ) +'px'
			, nVAlign = (Ch.nHeight-Ch.nWidth)/2-1
			, markError =function( aRange ){
				var n = V.getLine( aRange[0])
				if( n ){
					var o = eParent.appendChild( Tag('DT', { title:aRange[1], className:'error'})).style
					o.top = (n-1)*Ch.nHeight +nVAlign+'px'
					o.height = o.width = sDim
					}
				}
			, nFoldEndWidth = Math.max(
				D.oPositions.getColumnMax()*Ch.nWidth+10,
				D.oEditor.nTextZoneViewWidth-D.Padding.get('left')
				)
			this.oControlPoints = {}
			for(var i=0, a; a=this.aIntervals[i]; i++ ){
				if( ! a ) continue;
				if( ! a[2]){
					markError( a )
					continue;
					}
				var n1=a[0], n2=a[1], nZIndex=a[2]
				, n1ViewLine = V.getLine( n1 )
				if( ! n1ViewLine ) continue;
				var bHidden = V.isHiddenRange( n1+1, n2 )
				, sTop = (n1ViewLine-1)*Ch.nHeight +nVAlign+'px'
				// Point de contrôle de l'intervalle
				this.oControlPoints[i]=[
					eParent.appendChild( Tag( 'DT',{ nFoldID:i, innerHTML:bHidden?'+':'-', style:{
						top: sTop,
						height: sDim,
						lineHeight: sLineHeight,
						width: sDim,
						left: sLeft
						}})),
					bHidden
						// LIGNE HORIZONTALE
						? eParent.appendChild( Tag( 'DIV', { className:'foldEnd', style:{
							top: V.getLine(n1)*Ch.nHeight +'px',
							width: nFoldEndWidth +'px',
							left: F.nWidth +'px'
							}}))
						// LIGNE VERTICALE
						: eParent.appendChild( Tag( 'DD', { style:{
							top: sTop,
							height: (V.getLine(n2)-V.getLine(n1)+0.5)*Ch.nHeight-nVAlign +'px',
							width: sDim,
							left: Ch.nWidth-1 +'px',
							zIndex: nZIndex
							}}))
					]
				}
			this.highlight()
			},
		fold :_actionSingle('hideRange'),
		foldLevel :_actionGroup('fold'),
		unfold :_actionSingle('showRange'),
		unfoldLevel :_actionGroup('unfold'),
		toggle: function(){
			this[ this.bVisible?'hide':'show' ]()
			},
		hide: function(){
			var D=this.oDocument
			if( this.bVisible ) D.Padding.add( 'left', -this.nWidth )
			this.bVisible = !( this.e.style.display="none" )
			this.oControlPoints = null
			D.oEditor.execCommand('UNFOLD_ALL')
			},
		show: function(){
			this.bInitialized = true
			var D=this.oDocument
			if( ! this.bVisible ) D.Padding.add('left', this.nWidth )
			this.bVisible = !( this.e.style.display="" )
			this.getBrackets() // important pour l'initialisation
			this.refresh()
			D.oTextZoneControl.oTextZone.refresh()
			}
		}
	return F
	})())
--></div>

	<ul style="margin-right:2em; list-style-type: none;">
		<li>oFold = oEditor.oActiveDocument.oFold</li>
		<li>
			<input type="button" onclick="Button.hide()" value="oFold.hide()">
			<input type="button" onclick="Button.show()" value="oFold.show()">
			<input type="button" onclick="Button.toggle()" value="oFold.toggle()">
		</li>
	</ul>
	<div id="eKeyboard" title="ShortCuts"></div>
	<div id="eEditeur1"></div>
	<div id="eStats" class="stats"></div>
	<div style="clear:left;;"></div>
</div>

<div class=""><h2>A faire</h2>
	<ul>
		<li>...</li>
	</ul>
</div>

<script src="shared.js"></script>
<script src="src/js/Editor.js"></script>
<script src="src/js/Commands.js"></script>
<script src="src/js/KeyBoard.js"></script>
<script src="src/js/Selection.js"></script>
<script src="src/js/UndoStack.js"></script>
<script src="src/js/Syntax.js"></script>
<script src="src/js/Fold.js"></script>
<script src="src/js/TextMarker.js"></script>
<script src="src/js/Brackets.js"></script>
<script src="src/js/CommandsDesc.js"></script>
<link rel="stylesheet" type="text/css" href="src/stats.css">
<script src="src/stats.js"></script>
<script type="text/JavaScript">
_( 'eEditeur1,eSource,eContents,eKeyboard' )
eSource.value = eContents.firstChild.data

_( 'eCounter,eIndex,eDeleted,eAdded,eLinesNew,eLinesOld,eStats,eStats1,eStats2,eStats3,eStats4' )
Button={
	hide :function(){ oEditor.oActiveDocument.oFold.hide(); oEditor.focus()},
	show :function(){ oEditor.oActiveDocument.oFold.show(); oEditor.focus()},
	toggle :function(){ oEditor.oActiveDocument.oFold.toggle(); oEditor.focus()}
	}

BenchmarkFunctions(
	eStats, Editor.Modules.Fold.prototype,
	'getBrackets,refresh,highlight,fold,foldLevel,unfold,unfoldLevel,toggle,show,hide'
	)

var oEditor = new Editor ( eEditeur1, { sSyntax:'JS' })
var D = oEditor.newDoc( 'Source', eSource.value )
var D = oEditor.oActiveDocument

oEditor.execCommand( 'FOLD_LEVEL_2' )
D.oFold.unfold( 16, true )
oEditor.execCommand( 'FOLD_LEVEL_3' )

var aKeys = [], sChar, sShortcut, oShortCuts = Editor.Modules.KeyBoard.ShortCuts
for(var sAttr in oShortCuts ){
	sChar = sAttr.charAt(0)
	if( sChar.toUpperCase()==sChar ){
		sShortcut = str_replace( [ /\bUP/,/\bDOWN/,'RIGHT','LEFT'], ['&uarr;','&darr;','&rarr;','&larr;'], sAttr )
		var sCommandName = oShortCuts[sAttr]
		if( sCommandName.indexOf && ~sCommandName.indexOf( 'FOLD_' )){
			var sClass = ! Editor.Modules.Commands[sCommandName] ? 'red' : ''
			aKeys.push( '<KBD id="'+ sAttr 
				+'" title="'+ oCommandsDesc[sCommandName] +'"> '
				+ sShortcut 
				+' <I id="_'+ sCommandName +'" class="'+ sClass +'">'+ sCommandName +'</I></KBD>' )
			}
		}
	}
</script>
<link rel="stylesheet" type="text/css" href="src/view.commands.css">
<script src="src/view.commands.js"></script>
<script src="src/stats.js"></script>

</div>

	<link rel="stylesheet" type="text/css" href="src/_toc.css">
	<script src="src/_toc.js"></script>
	<script>setTOC('Module.Fold.htm')</script>
</body>
</html>